Themes In Magento
  - Define and describe the use of themes in Magento
  - Define and describe the use of design packages
  - Describe the process of defining template file paths

Blocks
  - Describe the programmatic structure of blocks
  - Describe the relationship between templates and blocks
  - Describe the stages in the lifecycle of a block
  - Describe events fired in blocks
  - Identify different types of blocks
  - Describe block instantiation
  - Explain different mechanisms for disabling block output
  - Describe how a typical block is rendered

Design layout, XML schema, and CMS content directives
  - Describe the elements of Magento's layout XML Schema, including the major layout directives
  - Register layout XML files
  - Create and add code to pages
  - Explain how variables can be passed to block instances via layout XML
  - Describe various ways to add and customize JavaScript to specific request scopes

Widgets
  - Widgets
     - Frontend Widgets
        - Create frontend widgets and describe widget architecture

Exercises:

Exercises for the rendering and Widgets sections
  - Using layout XML, add a custom block with a template that displays the current data in the left column of all pages
  - Using layout XML, remove the checkout link from the top navigation.
  - Change the root template to 1column.phtml on the customer account page, using layout XML.
  - In a custom action controller, render only the contents of a single custom update handle.
  - Rewrite the breadcrumbs block and add a hardcoded crumb at the beginning without modifying the template. Note: Do not use the _toHtml() method to implement this customization.
  - Add an additional hardcoded theme called "primary" that is always first in the fallback order in the configured package. Then add an additional fallback theme base/[configured-default-theme] that is always evaluated just before the base/default fallback. Create a test action that allows you to test all 6 possible template fallbacks at once.
  - Create a frontend widget with a JavaScript color picker form element and image upload functionality in the widget form. When rendering, the widget displays the image with a border of the chosen color. You can use the color picker library found in the js/jscolor/ directory in the Magento folder. For documentation, refer to the project home page at http://jscolor.com.
  - Add a default instance of the widge to the left column automatically when your module is installed. Use a default image.